package com.lyle.algorithm.bit;

/**
 * 最大的数字
 * 计算出 n 位二进制数所能表示的最大十进制数
 */
public class MaxNum {

    /**
     * @param x x位
     */
    public static long maxNumByXBits(int x){
//        return  -1L ^ (-1L  << x);
        return ~(-1L << x);
    }

    /**
     * -1L ^ (-1L << x) 表示什么
     * 在计算机中，第一位是符号位，负数的反码是除了符号位，1变0，0变1, 而补码则是反码+1：
     * -1L 原码：1000 0001
     * -1L 反码：1111 1110
     * -1L 补码：1111 1111
     * -1L其实在二进制里面其实就是全部为1,那么 -1L 左移动 3位，其实得到 1111 1000，也就是最后3位是0，
     * 再与-1L异或计算之后，其实得到的，就是后面3位全是1。-1L ^ (-1L << x)表示的其实就是x位全是1的值，
     * 也就是x位的二进制能表示的最大数值
     */

}
